name: Check URLs

# Trigger to only run this workflow automatically on docs/ directory changes
on:
  push:
    branches:
      - "main"
    paths:
      - "docs/**"

  # Allows manual run of this workflow from the Actions tab (on any branch)
  workflow_dispatch:

jobs:
  check-urls:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: URLs Checker
      uses: urlstechie/urlchecker-action@0.0.34  # From here: https://github.com/urlstechie/urlchecker-action
      with:
        # A comma-separated list of file types to cover in the URL checks
        file_types: .md,.html,.yml,.conf,.txt,.py,.json,.sh,.ini,.spg

        # Choose whether to include file with no URLs in the prints.
        print_all: false

        # Choose whether to print a more verbose end summary with files and broken URLs
        verbose: true

        # The timeout seconds to provide to requests, defaults to 5 seconds
        timeout: 5

        # How many times to retry a failed request (each is logged, defaults to 1)
        retry_count: 3

        # A comma separated patterns to exclude during URL checks
        exclude_patterns: localhost,api,apis,rss,etc,xx,googleapis,hostname,snowflake,graph.microsoft.com,login.microsoftonline.com,my-host.com,azure.com,github.com

        # Exclude these files from the checker
        exclude_files: Swirl.postman_collection.json,docs/googlec95caf0bd4a8c5df.html,docs/Gemfile,docs/Gemfile.lock,docs/_config.yml,tests/,SearchProviders/,DevUtils/
      run: |
        urlchecker-action > urlcheck_output.txt

    - name: URLs Checker Report
      id: create-summary
      run: |
        echo "## Broken Links Report" > summary.md
        echo "" >> summary.md
        grep -i "broken" urlcheck_output.txt >> summary.md || echo "No broken links found." >> summary.md

    - name: Post Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });